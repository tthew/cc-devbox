#!/bin/bash

# Advanced Whitelist Management Script for DNS filtering
# Ensures dnsmasq and whitelist are always synchronized

WHITELIST_FILE="/workspace/.claude/whitelist"
DNSMASQ_CONFIG="/etc/dnsmasq.d/whitelist.conf"

# Function to rebuild the entire dnsmasq configuration
rebuild_dnsmasq_config() {
    echo "Rebuilding dnsmasq configuration..."
    
    # Create the base configuration
    cat > "$DNSMASQ_CONFIG" << 'EOF'
# Minimal DNS whitelist configuration for dnsmasq
# Basic configuration
listen-address=127.0.0.1
port=53
no-dhcp-interface=
cache-size=1000

# Block all domains by default (IPv4 and IPv6)
address=/#/127.0.0.1
address=/#/::1

# Essential development domains (always included)
server=/playwright.dev/8.8.8.8
server=/cdn.playwright.dev/8.8.8.8
server=/playwright.download.prss.microsoft.com/8.8.8.8
server=/npmjs.org/8.8.8.8
server=/registry.npmjs.org/8.8.8.8
server=/nodejs.org/8.8.8.8
server=/supabase.com/8.8.8.8

# Allow localhost 
server=/localhost/

# User-whitelisted domains:
EOF

    # Add all domains from the whitelist file
    if [ -f "$WHITELIST_FILE" ]; then
        while read -r domain; do
            if [ ! -z "$domain" ] && [ "$domain" != "" ]; then
                echo "server=/$domain/8.8.8.8" >> "$DNSMASQ_CONFIG"
            fi
        done < "$WHITELIST_FILE"
    fi
    
    # Restart dnsmasq to apply changes
    restart_dnsmasq
}

# Function to restart dnsmasq properly
restart_dnsmasq() {
    echo "Restarting dnsmasq..."
    pkill dnsmasq 2>/dev/null || true
    sleep 1
    dnsmasq --conf-file=/etc/dnsmasq.conf >/dev/null 2>&1 &
    sleep 2
    echo "dnsmasq restarted"
}

# Function to add a domain to the whitelist
add_domain() {
    local domain="$1"
    
    if [ -z "$domain" ]; then
        echo "Usage: whitelist add <domain>"
        exit 1
    fi
    
    echo "Adding domain: $domain"
    
    # Create whitelist file if it doesn't exist
    touch "$WHITELIST_FILE" 2>/dev/null || true
    
    # Check if domain already exists
    if grep -q "^$domain$" "$WHITELIST_FILE" 2>/dev/null; then
        echo "Domain $domain already in whitelist"
        return 0
    fi
    
    # Add domain to whitelist file
    echo "$domain" >> "$WHITELIST_FILE"
    
    # Rebuild entire dnsmasq config to ensure sync
    rebuild_dnsmasq_config
    
    echo "Domain $domain added successfully"
}

# Function to remove a domain from the whitelist
remove_domain() {
    local domain="$1"
    
    if [ -z "$domain" ]; then
        echo "Usage: whitelist remove <domain>"
        exit 1
    fi
    
    echo "Removing domain: $domain"
    
    if [ ! -f "$WHITELIST_FILE" ]; then
        echo "Whitelist file does not exist"
        return 1
    fi
    
    # Remove domain from whitelist file
    grep -v "^$domain$" "$WHITELIST_FILE" > "$WHITELIST_FILE.tmp" 2>/dev/null || true
    mv "$WHITELIST_FILE.tmp" "$WHITELIST_FILE" 2>/dev/null || true
    
    # Rebuild entire dnsmasq config to ensure sync
    rebuild_dnsmasq_config
    
    echo "Domain $domain removed successfully"
}

# Function to list all whitelisted domains
list_domains() {
    echo "Currently whitelisted domains:"
    if [ -f "$WHITELIST_FILE" ]; then
        cat "$WHITELIST_FILE" 2>/dev/null | sort | while read -r domain; do
            [ -n "$domain" ] && echo "  - $domain"
        done
    else
        echo "  No domains whitelisted yet"
    fi
}

# Function to sync whitelist with dnsmasq (force rebuild)
sync_whitelist() {
    echo "Synchronizing whitelist with dnsmasq configuration..."
    rebuild_dnsmasq_config
    echo "Synchronization complete"
}

# Function to show help
show_help() {
    echo "Advanced Whitelist Management Script"
    echo ""
    echo "Usage: whitelist <command> [arguments]"
    echo ""
    echo "Commands:"
    echo "  add <domain>     Add a domain to the whitelist"
    echo "  remove <domain>  Remove a domain from the whitelist"
    echo "  list             List all whitelisted domains"
    echo "  sync             Force synchronization of whitelist and dnsmasq"
    echo "  help             Show this help message"
    echo ""
    echo "Examples:"
    echo "  whitelist add example.com"
    echo "  whitelist remove example.com"
    echo "  whitelist list"
    echo "  whitelist sync"
}

# Main script logic
case "$1" in
    "add")
        add_domain "$2"
        ;;
    "remove")
        remove_domain "$2"
        ;;
    "list")
        list_domains
        ;;
    "sync")
        sync_whitelist
        ;;
    "help"|"")
        show_help
        ;;
    *)
        echo "Unknown command: $1"
        show_help
        exit 1
        ;;
esac