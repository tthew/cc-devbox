{
  "permissions": {
    "allow": [
      "Bash(mkdir:*)",
      "Bash(find:*)",
      "Bash(ls:*)",
      "Bash(git -c safe.directory=/workspace status)",
      "Bash(curl:*)",
      "mcp__playwright__browser_navigate",
      "mcp__playwright__browser_install",
      "mcp__playwright__browser_take_screenshot",
      "mcp__playwright__browser_press_key",
      "Bash(npm run lint)",
      "Bash(pkill:*)",
      "Bash(npm run build:*)",
      "Bash(npm run:*)",
      "mcp__playwright__browser_tab_new",
      "mcp__playwright__browser_close",
      "mcp__playwright__browser_resize",
      "mcp__playwright__browser_tab_list",
      "mcp__sequential-thinking__sequentialthinking",
      "Bash(docker-compose:*)",
      "Bash(ssh:*)",
      "Bash(docker exec:*)",
      "Bash(make:*)",
      "Bash(docker system prune:*)",
      "Bash(docker logs:*)",
      "Bash(__NEW_LINE__ make stop)",
      "Bash(docker cp:*)",
      "Bash(__NEW_LINE__ docker exec life-in-hand-claude-dev bash -c \"\necho ''ðŸ”§ Installing clean minimal .zshrc...''\n\n# Replace the .zshrc with our clean version\nsudo -u dev cp /tmp/simple-zshrc /home/dev/.zshrc\nsudo chown dev:dev /home/dev/.zshrc\n\necho ''âœ… Installed minimal .zshrc''\n\n# Test it\nsudo -u dev zsh -c ''source ~/.zshrc && echo \"\"âœ… Clean ZSH works!\"\" && whitelist list | head -5''\n\")",
      "Bash(mv:*)",
      "Bash(chmod:*)",
      "Bash(__NEW_LINE__ echo \"âœ… Replaced entrypoint.sh with simplified working version\")",
      "mcp__vitest-runner__run-vitest",
      "Bash(hostname:*)",
      "Bash(env)",
      "Bash(source:*)",
      "Bash(echo:*)",
      "Bash(docker stats:*)",
      "Bash(system_profiler:*)",
      "Bash(git add:*)",
      "Bash(set -a)",
      "Bash(docker system:*)",
      "Bash(bash:*)",
      "Bash(grep:*)",
      "Bash(cat:*)",
      "mcp__serena__get_symbols_overview",
      "mcp__serena__search_for_pattern",
      "mcp__serena__list_dir",
      "mcp__serena__activate_project",
      "mcp__serena__initial_instructions",
      "mcp__serena__check_onboarding_performed",
      "mcp__serena__onboarding",
      "mcp__serena__read_file",
      "mcp__serena__get_current_config",
      "mcp__serena__restart_language_server",
      "Bash(npm test:*)",
      "Bash(rm:*)",
      "mcp__ESLint__lint-files",
      "Bash(sudo rm:*)"
    ],
    "deny": []
  },
  "enabledMcpjsonServers": [
    "sequential-thinking",
    "playwright",
    "ESLint",
    "vitest-runner",
    "Context7",
    "serena"
  ]
}